/// Applies the micro clearfix hack popularized by Nicolas Gallagher. Include this mixin on a container if its children are all floated, to give the container a proper height.
/// The clearfix is augmented with specific styles to prevent borders in flexbox environments
/// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix Hack
/// @link http://danisadesigner.com/blog/flexbox-clear-fix-pseudo-elements/ Flexbox fix
@mixin clearfix {

   &::before,
   &::after {
      display: table;
      content: ' ';

      @if $global-flexbox {
         flex-basis: 0;
         order: 1;
      }
   }

   &::after {
      clear: both;
   }
}

/// Iterates through breakpoints defined in `$breakpoint-classes` and prints the CSS inside the mixin at each breakpoint's media query. Use this with the grid, or any other component that has responsive classes.
///
/// @param {Boolean} $small [true] - If `false`, the mixin will skip the `small` breakpoint. Use this with components that don't prefix classes with `small-`, only `medium-` and up.
/// @param {Boolean} $auto-insert-breakpoints [true] - If `false`, the mixin will iterate over breakpoints without doing the media query itself. Useful for more complex media query generation as in the margin grid.
@mixin -zf-each-breakpoint($small: true, $auto-insert-breakpoints: true) {
   $list: $breakpoint-classes;

   @if not $small {
      $list: sl-remove($list, $-zf-zero-breakpoint);
   }

   @each $name in $list {
      $old-zf-size: null;

      @if global-variable-exists(-zf-size) {
         $old-zf-size: $-zf-size;
      }

      $-zf-size: $name !global;

      @if $auto-insert-breakpoints {
         @include breakpoint($name) {
            @content;
         }
      }

      @else {
         @content;
      }

      $-zf-size: $old-zf-size !global;
   }
}

/// Generate the `@content` passed to the mixin with a value `$-zf-bp-value` related to a breakpoint, depending on the `$name` parameter:
/// - For a single value, `$-zf-bp-value` is this value.
/// - For a breakpoint name, `$-zf-bp-value` is the corresponding breakpoint value in `$map`.
/// - For "auto", `$-zf-bp-value` is the corresponding breakpoint value in `$map` and is passed to `@content`, which is made responsive for each breakpoint of `$map`.
/// @param {Number|Array|Keyword} $name [auto] - Single value, breakpoint name, or list of breakpoint names to use. "auto" by default.
/// @param {Number|Map} $map - Map of breakpoints and values or single value to use.
@mixin -zf-breakpoint-value($name: auto,
   $map: null) {
   @if $name==auto and type-of($map)=='map' {

      // "auto"
      @each $k,
      $v in $map {
         @include breakpoint($k) {
            @include -zf-breakpoint-value($v, $map) {
               @content;
            }
         }
      }
   }

   @else {

      // breakpoint name
      @if type-of($name)=='string' {
         $name: -zf-get-bp-val($map, $name);
      }

      // breakpoint value
      $-zf-bp-value: $name !global;
      @content;
   }
}